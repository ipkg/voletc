{
  "name": "vol-etc",
  "tagline": "Distributed, Persistent Docker Volume Plugin for Dynamic Application Configurations",
  "body": "## Overview\r\n\r\nvoletc (pronounced vol etc) is a Docker Volume Plugin that allows to create volumes containing application configurations that can be accessed on any of your docker nodes.  \r\n\r\nOnce created the application no longer needs to worry about obtaining application specific configurations.  The mounted volume will contain all of config file/s based on the templates and keys you've specified during volume creation.\r\n\r\nThe configuration data can be stored in consul or etcd but currently only consul support exists.\r\n\r\nA config volume name must be in the following format\r\n \r\n\t<name>-<version>-<environment>\r\n\r\n\r\nBased on this a volume is created per unique `name`, `version` and `environment`.  The layout looks like this:\r\n- Each application has versions.\r\n- Each version contains an associated template along with environments.\r\n- Each environment contains its keys.\r\n- Templates are shared across each environment and per environment keys are applied to the template\r\n\r\nVolumes can be managed through docker using the `docker volume` command and via the CLI tool.\r\n\r\n## Docker \r\nThe Docker CLI can be used to manage volumes using the `voletc` driver and driver specific options.\r\n\r\n### Creating volumes\r\n\r\n\tdocker volume create --name test-0.1.0-dev -d voletc \\\r\n\t\t--opt=subpath/key=value \\\r\n\t\t--opt=template:config.json='{\"key\":\"${subpath/key}\"}'\r\n\r\n\r\nThis creates a config volume with a `template` that will be called `config.json` and will also contain a key called `subpath/key` with a value of `value` persisting them to the backend.  When docker requests the volume to be mounted the configuration files will be dynamically generated and available on the newly created volume.\r\n\r\n`template` is a keyword signifying that key contains template data rather than just key value data.\r\n\r\n\r\n### Using volumes\r\n\r\n\tdocker run --rm -it -v test-0.1.1-dev:/opt/myconfigs/ busbox\r\n\r\n\r\nYour config should now be available at `/opt/myconfigs/config.json` in the running container.  If there are multiple config files they will all be located under `/opt/myconfigs`.  The naming of the config is controlled by what has been supplied as part of the `--opt=template:<name>.<ext>` argument at the time of creation.\r\n\r\n### Removing volumes\r\n\r\n\tdocker volume rm test-0.1.1-dev\r\n\r\n\r\nRemoving a volume removes all the associated keys from the backend for the given environment.  It does not remove the template (as it is associated to the version).\r\n\r\n## Command Line Tool\r\nThis tool provides more functionality in regards to volume management than are available through docker.\r\n\r\n### Installation\r\nDownload the latest stable linux installer.  Once downloaded, untar and execute the installer.\r\n\r\n\t# Download installer\r\n\tcurl -O -sL https://github.com/ipkg/voletc/releases/download/v0.1.1/voletc-0.1.1.tgz\r\n\t\r\n\t# Untar\r\n\ttar -zxvf voletc-0.1.1.tgz\r\n\t\r\n\t# Run installer\r\n\t./voletc-installer\r\n\r\nThis will install the binary and startup script in:\r\n\r\n- /usr/local/bin/voletc\r\n- /etc/init/voletc.conf\r\n\r\nrespectively.  You can now start the service as follows:\r\n\r\n\t# Start the agent\r\n\tstart voletc\r\n\r\n\t# Make sure it is running\r\n\tstatus voletc\r\n\r\nTo troubleshoot the service check the log located at `/var/log/voletc.log`\r\n\r\n#### Roadmap\r\n\r\n- Support for an encryption interface for stored data. \r\n- Support for etcd as a backend.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}