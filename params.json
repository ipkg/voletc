{
  "name": "vol-etc",
  "tagline": "Distributed, Persistent Docker Volume Plugin for Dynamic Application Configurations",
  "body": "## Overview \r\n\r\nvoletc (pronounced vol etc) is a Docker Volume Plugin that allows to create volumes containing application configurations that can be accessed on any of your docker nodes.  \r\n\r\nOnce created the application no longer needs to worry about obtaining application specific configurations.  The mounted volume will contain all of config file/s based on the templates and keys you've specified during volume creation.\r\n\r\nThe configuration data can be stored in consul or etcd but currently only consul support exists.\r\n\r\nA config volume name must be in the following format\r\n \r\n\t<name>-<version>-<environment>\r\n\r\nBased on this a volume is created per unique `name`, `version` and `environment`.  The layout looks like this:\r\n- Each application has versions.\r\n- Each version contains an associated template along with environments.\r\n- Each environment contains its keys.\r\n- Templates are shared across each environment and per environment keys are applied to the template\r\n\r\nVolumes can be managed directly through [**docker**](#docker) and via the [**CLI**](#command-line).\r\n\r\n## Docker \r\nThe Docker CLI can be used to manage volumes using the `voletc` driver and driver specific options.\r\n\r\n### Creating volumes\r\n\r\n\tdocker volume create --name test-0.1.0-dev -d voletc \\\r\n\t\t--opt=subpath/key=value \\\r\n\t\t--opt=template:config.json='{\"key\":\"${subpath/key}\"}'\r\n\r\nThis creates a config volume with a `template` that will be called `config.json` and will also contain a key called `subpath/key` with a value of `value` persisting them to the backend.  When docker requests the volume to be mounted the configuration files will be dynamically generated and available on the newly created volume.\r\n\r\n`template` is a keyword signifying that key contains template data rather than just key value data.\r\n\r\n\r\n### Using volumes\r\n\r\n\tdocker run --rm -it -v test-0.1.1-dev:/opt/myconfigs/ busbox\r\n\r\n\r\nYour config should now be available at `/opt/myconfigs/config.json` in the running container.  If there are multiple config files they will all be located under `/opt/myconfigs`.  The naming of the config is controlled by what has been supplied as part of the `--opt=template:<name>.<ext>` argument at the time of creation.\r\n\r\n### Removing volumes\r\n\r\n\tdocker volume rm test-0.1.1-dev\r\n\r\n\r\nRemoving a volume removes all the associated keys from the backend for the given environment.  It does not remove the template (as it is associated to the version).\r\n\r\nCurrently, there is not a way via Docker to change volumes configs once they have been created.  You can either use the [**CLI**](#command-line) or destroy and re-create the volume.\r\n\r\n## Command Line\r\nThe command line tool provides more functionality in regards to volume management than are available through docker.\r\n\r\n\tUsage:\r\n\r\n\t  voletc [options] <cmd> [name] [key=value] [key=value]\r\n\r\n\t  A tool to manage application configuration volumes.\r\n\r\n\tCommands:\r\n\r\n\t  ls        List volumes\r\n\t  create    Create new volume\r\n\t  edit      Edit volume configurations\r\n\t  info      Show volume info\r\n\t  rm        Destroy volume i.e. remove all keys\r\n\t  render    Show rendered volume templates\r\n\t  version   Show version\r\n\r\n\tOptions:\r\n\r\n\t  -b string\r\n\t    \tService bind address (default \"127.0.0.1:8989\")\r\n\t  -dir string\r\n\t    \tData directory (default \"/opt\")\r\n\t  -prefix string\r\n\t    \tPath prefix to store data under (default \"voletc\")\r\n\t  -uri string\r\n\t    \tBackend uri (default \"consul://localhost:8500\")\r\n\r\nAside from the global options each command also has its specific options.\r\n\r\n### Create a volume\r\n\r\n\tvoletc create test-0.1.1-dev \\\r\n\t\tdb/name=dbname \\\r\n\t\tdb/user=dbuser \\\r\n\t\ttemplate:config.json=./config.json \\\r\n\t\ttemplate:inline.json='{\"db_name\": \"${db/name}\", \"db_user\": \"${db/user}\"}'\r\n\r\nTo simply simulate the creation rather than actually creating the volume, use the `-dryrun` flag.\r\n\r\n### Get volume details\r\n\r\n\tvoletc info test-0.1.1-dev\r\n\r\n### List volumes\r\n\r\n\tvoletc ls\r\n\r\n### Edit a volume\r\n\r\n\tvoletc edit test-0.1.1-dev db/user=new_user\r\n\r\nTo simply simulate the update rather than actually updating the volume configs, use the `-dryrun` flag.\r\n\r\n### Render volume templates\r\n\r\n\tvoletc render test-0.1.1-dev\r\n\r\n### Remove a volume\r\n\r\n\tvoletc rm test-0.1.1-dev\r\n\r\nTo remove the volume without being prompted include the `-y` flag.\r\n\r\n## Installation\r\nThe current supported platforms are [Linux](#linux) and [OS X](#os-x).  Download the package from the [releases](https://github.com/ipkg/voletc/releases) page.\r\n\r\n### Linux\r\nOnce downloaded, untar and execute the installer.\r\n\r\n\t# Untar\r\n\ttar -zxvf voletc-0.1.6-linux.tgz\r\n\t\r\n\t# Run installer\r\n\t./voletc-installer.sh\r\n\r\nThis will install the binary and startup script.\r\n\r\n- /usr/local/bin/voletc\r\n- /etc/init/voletc.conf\r\n\r\nYou can now start the service as follows:\r\n\r\n\t# Start the agent\r\n\tstart voletc\r\n\r\n\t# Make sure it is running\r\n\tstatus voletc\r\n\r\nTo troubleshoot the service check the log located at `/var/log/voletc.log`\r\n\r\n### OS X\r\nOnce downloaded, untar the package.  You can know execute the `voletc` binary.\r\n\r\n### Roadmap\r\n\r\n- Support for an encryption interface for stored data. \r\n- Support for etcd as a backend.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}